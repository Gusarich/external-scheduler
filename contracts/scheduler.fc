#include "imports/stdlib.fc";

const int op::schedule = 0xd2f183;
const int const::bounty_value = 25000000;

(cell, (int, cell, int)) ~udict::delete_get_min_ref(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMINREF" "NULLSWAPIFNOT2";

;; https://github.com/ProgramCrafter/ton-stable-timer/blob/e69348d4d6344a8bdeb339f435ccc281d7e88196/func/timer.fc#LL79C1-L86C2
(slice, ()) load_state_init(slice cs) impure inline {
    if (cs~load_uint(1)) { cs~skip_bits(5); }     ;; Maybe (## 5)
    if (cs~load_uint(1)) { cs~skip_bits(2); }     ;; Maybe TickTock
    if (cs~load_uint(1)) { cs~load_ref();   }     ;; Maybe ^Cell
    if (cs~load_uint(1)) { cs~load_ref();   }     ;; Maybe ^Cell
    cs~load_dict();
    return (cs, ());
}

;; https://github.com/ProgramCrafter/ton-stable-timer/blob/e69348d4d6344a8bdeb339f435ccc281d7e88196/func/timer.fc#LL88C18-L88C18
int validate_msg_value(cell msg) impure inline {
    int value = 0;
    slice msg = msg.begin_parse();

    ;; info
    throw_unless(123, msg~load_uint(1) == 0);
    throw_unless(100, msg~load_uint(3) == 4);
    msg~load_msg_addr();
    msg~load_msg_addr();
    value = msg~load_coins();
    msg~load_coins();
    msg~load_coins();
    msg~skip_bits(96);

    ;; init
    if (msg~load_uint(1)) {  ;; Maybe (Either StateInit ^StateInit)
        if (msg~load_uint(1)) {
            msg~load_ref().begin_parse().load_state_init();
        } else {
            msg~load_state_init();
        }
    }

    ;; body
    if (msg~load_uint(1)) {
        msg~load_ref();
    }

    msg~impure_touch();

    return value;
}

() recv_internal (int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 32) {
        return ();
    }

    int op = in_msg_body~load_uint(32);
    
    if (op == op::schedule) {
        int time = in_msg_body~load_uint(32);
        cell message = in_msg_body~load_ref();
        int value = validate_msg_value(message);

        msg_value -= const::bounty_value + value;
        set_gas_limit(msg_value / 1000);

        randomize_lt();
        cell dict = get_data().begin_parse().preload_dict();
        dict~udict_set_ref(
            96,
            (time << 64) + rand(18446744073709551616),
            message
        );
        set_data(begin_cell().store_dict(dict).end_cell());
    }
}

() recv_external (slice in_msg) impure {
    slice bounty_address = in_msg;
    cell dict = get_data().begin_parse().preload_dict();
    (int time, cell message, int f?) = dict~udict::delete_get_min_ref(96);
    time = time >> 64;

    throw_unless(702, now() >= time);
    accept_message();

    send_raw_message(message, 2);

    send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(bounty_address)
        .store_coins(const::bounty_value)
        .store_uint(0, 107)
    .end_cell(), 2);

    set_data(begin_cell().store_dict(dict).end_cell());
}

(int, cell) get_next_message () method_id {
    (int time, cell message, int f?) = get_data().begin_parse().preload_dict().udict_get_min_ref?(96);
    if (f?) {
        return (time >> 64, message);
    }
    return (null(), null());
}